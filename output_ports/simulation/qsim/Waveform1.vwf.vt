// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/25/2024 20:25:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    output_ports
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module output_ports_vlg_sample_tst(
	address,
	clock,
	data_in,
	reset,
	writen,
	sampler_tx
);
input [7:0] address;
input  clock;
input [7:0] data_in;
input  reset;
input  writen;
output sampler_tx;

reg sample;
time current_time;
always @(address or clock or data_in or reset or writen)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module output_ports_vlg_check_tst (
	port_out_00,
	port_out_01,
	sampler_rx
);
input [7:0] port_out_00;
input [7:0] port_out_01;
input sampler_rx;

reg [7:0] port_out_00_expected;
reg [7:0] port_out_01_expected;

reg [7:0] port_out_00_prev;
reg [7:0] port_out_01_prev;

reg [7:0] port_out_00_expected_prev;
reg [7:0] port_out_01_expected_prev;

reg [7:0] last_port_out_00_exp;
reg [7:0] last_port_out_01_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	port_out_00_prev = port_out_00;
	port_out_01_prev = port_out_01;
end

// update expected /o prevs

always @(trigger)
begin
	port_out_00_expected_prev = port_out_00_expected;
	port_out_01_expected_prev = port_out_01_expected;
end


// expected port_out_00[ 7 ]
initial
begin
	port_out_00_expected[7] = 1'bX;
end 
// expected port_out_00[ 6 ]
initial
begin
	port_out_00_expected[6] = 1'bX;
end 
// expected port_out_00[ 5 ]
initial
begin
	port_out_00_expected[5] = 1'bX;
end 
// expected port_out_00[ 4 ]
initial
begin
	port_out_00_expected[4] = 1'bX;
end 
// expected port_out_00[ 3 ]
initial
begin
	port_out_00_expected[3] = 1'bX;
end 
// expected port_out_00[ 2 ]
initial
begin
	port_out_00_expected[2] = 1'bX;
end 
// expected port_out_00[ 1 ]
initial
begin
	port_out_00_expected[1] = 1'bX;
end 
// expected port_out_00[ 0 ]
initial
begin
	port_out_00_expected[0] = 1'bX;
end 
// expected port_out_01[ 7 ]
initial
begin
	port_out_01_expected[7] = 1'bX;
end 
// expected port_out_01[ 6 ]
initial
begin
	port_out_01_expected[6] = 1'bX;
end 
// expected port_out_01[ 5 ]
initial
begin
	port_out_01_expected[5] = 1'bX;
end 
// expected port_out_01[ 4 ]
initial
begin
	port_out_01_expected[4] = 1'bX;
end 
// expected port_out_01[ 3 ]
initial
begin
	port_out_01_expected[3] = 1'bX;
end 
// expected port_out_01[ 2 ]
initial
begin
	port_out_01_expected[2] = 1'bX;
end 
// expected port_out_01[ 1 ]
initial
begin
	port_out_01_expected[1] = 1'bX;
end 
// expected port_out_01[ 0 ]
initial
begin
	port_out_01_expected[0] = 1'bX;
end 
// generate trigger
always @(port_out_00_expected or port_out_00 or port_out_01_expected or port_out_01)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected port_out_00 = %b | expected port_out_01 = %b | ",port_out_00_expected_prev,port_out_01_expected_prev);
	$display("| real port_out_00 = %b | real port_out_01 = %b | ",port_out_00_prev,port_out_01_prev);
`endif
	if (
		( port_out_00_expected_prev[0] !== 1'bx ) && ( port_out_00_prev[0] !== port_out_00_expected_prev[0] )
		&& ((port_out_00_expected_prev[0] !== last_port_out_00_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[0] = port_out_00_expected_prev[0];
	end
	if (
		( port_out_00_expected_prev[1] !== 1'bx ) && ( port_out_00_prev[1] !== port_out_00_expected_prev[1] )
		&& ((port_out_00_expected_prev[1] !== last_port_out_00_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[1] = port_out_00_expected_prev[1];
	end
	if (
		( port_out_00_expected_prev[2] !== 1'bx ) && ( port_out_00_prev[2] !== port_out_00_expected_prev[2] )
		&& ((port_out_00_expected_prev[2] !== last_port_out_00_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[2] = port_out_00_expected_prev[2];
	end
	if (
		( port_out_00_expected_prev[3] !== 1'bx ) && ( port_out_00_prev[3] !== port_out_00_expected_prev[3] )
		&& ((port_out_00_expected_prev[3] !== last_port_out_00_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[3] = port_out_00_expected_prev[3];
	end
	if (
		( port_out_00_expected_prev[4] !== 1'bx ) && ( port_out_00_prev[4] !== port_out_00_expected_prev[4] )
		&& ((port_out_00_expected_prev[4] !== last_port_out_00_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[4] = port_out_00_expected_prev[4];
	end
	if (
		( port_out_00_expected_prev[5] !== 1'bx ) && ( port_out_00_prev[5] !== port_out_00_expected_prev[5] )
		&& ((port_out_00_expected_prev[5] !== last_port_out_00_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[5] = port_out_00_expected_prev[5];
	end
	if (
		( port_out_00_expected_prev[6] !== 1'bx ) && ( port_out_00_prev[6] !== port_out_00_expected_prev[6] )
		&& ((port_out_00_expected_prev[6] !== last_port_out_00_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[6] = port_out_00_expected_prev[6];
	end
	if (
		( port_out_00_expected_prev[7] !== 1'bx ) && ( port_out_00_prev[7] !== port_out_00_expected_prev[7] )
		&& ((port_out_00_expected_prev[7] !== last_port_out_00_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_00[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_00_expected_prev);
		$display ("     Real value = %b", port_out_00_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_port_out_00_exp[7] = port_out_00_expected_prev[7];
	end
	if (
		( port_out_01_expected_prev[0] !== 1'bx ) && ( port_out_01_prev[0] !== port_out_01_expected_prev[0] )
		&& ((port_out_01_expected_prev[0] !== last_port_out_01_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[0] = port_out_01_expected_prev[0];
	end
	if (
		( port_out_01_expected_prev[1] !== 1'bx ) && ( port_out_01_prev[1] !== port_out_01_expected_prev[1] )
		&& ((port_out_01_expected_prev[1] !== last_port_out_01_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[1] = port_out_01_expected_prev[1];
	end
	if (
		( port_out_01_expected_prev[2] !== 1'bx ) && ( port_out_01_prev[2] !== port_out_01_expected_prev[2] )
		&& ((port_out_01_expected_prev[2] !== last_port_out_01_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[2] = port_out_01_expected_prev[2];
	end
	if (
		( port_out_01_expected_prev[3] !== 1'bx ) && ( port_out_01_prev[3] !== port_out_01_expected_prev[3] )
		&& ((port_out_01_expected_prev[3] !== last_port_out_01_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[3] = port_out_01_expected_prev[3];
	end
	if (
		( port_out_01_expected_prev[4] !== 1'bx ) && ( port_out_01_prev[4] !== port_out_01_expected_prev[4] )
		&& ((port_out_01_expected_prev[4] !== last_port_out_01_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[4] = port_out_01_expected_prev[4];
	end
	if (
		( port_out_01_expected_prev[5] !== 1'bx ) && ( port_out_01_prev[5] !== port_out_01_expected_prev[5] )
		&& ((port_out_01_expected_prev[5] !== last_port_out_01_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[5] = port_out_01_expected_prev[5];
	end
	if (
		( port_out_01_expected_prev[6] !== 1'bx ) && ( port_out_01_prev[6] !== port_out_01_expected_prev[6] )
		&& ((port_out_01_expected_prev[6] !== last_port_out_01_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[6] = port_out_01_expected_prev[6];
	end
	if (
		( port_out_01_expected_prev[7] !== 1'bx ) && ( port_out_01_prev[7] !== port_out_01_expected_prev[7] )
		&& ((port_out_01_expected_prev[7] !== last_port_out_01_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port port_out_01[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", port_out_01_expected_prev);
		$display ("     Real value = %b", port_out_01_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_port_out_01_exp[7] = port_out_01_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module output_ports_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg [7:0] data_in;
reg reset;
reg writen;
// wires                                               
wire [7:0] port_out_00;
wire [7:0] port_out_01;

wire sampler;                             

// assign statements (if any)                          
output_ports i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.port_out_00(port_out_00),
	.port_out_01(port_out_01),
	.reset(reset),
	.writen(writen)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #50000 1'b1;
	reset = #100000 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
	address[7] = #50000 1'b1;
	address[7] = #100000 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #50000 1'b1;
	address[6] = #100000 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #50000 1'b1;
	address[5] = #100000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
	address[0] = #100000 1'b1;
	address[0] = #50000 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
	data_in[7] = #50000 1'b1;
	data_in[7] = #100000 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
	data_in[6] = #100000 1'b1;
	data_in[6] = #50000 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
	data_in[5] = #50000 1'b1;
	data_in[5] = #50000 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
	data_in[3] = #50000 1'b1;
	data_in[3] = #100000 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
	data_in[2] = #100000 1'b1;
	data_in[2] = #50000 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
	data_in[1] = #50000 1'b1;
	data_in[1] = #50000 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
	data_in[0] = #50000 1'b1;
	data_in[0] = #100000 1'b0;
end 

// writen
initial
begin
	writen = 1'b0;
	writen = #50000 1'b1;
	writen = #100000 1'b0;
end 

output_ports_vlg_sample_tst tb_sample (
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.writen(writen),
	.sampler_tx(sampler)
);

output_ports_vlg_check_tst tb_out(
	.port_out_00(port_out_00),
	.port_out_01(port_out_01),
	.sampler_rx(sampler)
);
endmodule

